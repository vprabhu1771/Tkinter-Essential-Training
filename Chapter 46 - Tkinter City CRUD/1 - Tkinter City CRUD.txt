import tkinter as tk
from tkinter import messagebox
import sqlite3

conn = sqlite3.connect('ifsc_code_finder.db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS city (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name VARCHAR(255),
        city_id INTEGER,
        FOREIGN KEY (city_id) REFERENCES city(id)
        )
''')
conn.commit()

def insert_city(name, city_id):
    cursor.execute("INSERT INTO city (name, city_id) VALUES (?, ?)", (name, city_id))
    conn.commit()

def update_city(id, name, city_id):
    cursor.execute("UPDATE city SET name = ?, city_id = ? WHERE id = ?", (name, city_id, id))
    conn.commit()

def delete_city(id):
    cursor.execute("DELETE FROM city WHERE id = ?", (id,))
    conn.commit()

def get_all_cities():
    cursor.execute("SELECT * FROM city")
    rows = cursor.fetchall()
    return rows

def get_all_states():
    cursor.execute("SELECT * FROM state")
    rows = cursor.fetchall()
    return rows

def get_city_by_id(id):
    cursor.execute("SELECT * FROM city WHERE id = ?", (id,))
    row = cursor.fetchone()
    return row

def create_city():
    name = name_entry.get().strip()
    state_id = state_var.get()
    if name:
        insert_city(name, state_id)
        messagebox.showinfo("Success", "city created successfully")
        load_cities()
        name_entry.delete(0, tk.END)
    else:
        messagebox.showerror("Error", "Please enter a city name")

def update_selected_city():
    selected_item = cities_listbox.curselection()
    if selected_item:
        selected_city = cities_listbox.get(selected_item)
        new_name = name_entry.get().strip()
        state_id = state_var.get()
        if new_name:
            city_id = selected_city.split(":")[0]
            update_city(city_id,new_name,state_id)
            messagebox.showinfo("Success", "state updated successfully")
            load_cities()
            name_entry.delete(0, tk.END)
        else:
            messagebox.showerror("Error", "Please enter a city name")
    else:
        messagebox.showerror("Error", "No city selected")

def delete_selected_city():
    selected_item = cities_listbox.curselection()
    if selected_item:
        selected_city = cities_listbox.get(selected_item)
        state_id = selected_city.split(":")[0]
        delete_city(state_id)
        messagebox.showinfo("Success", "city deleted successfully")
        load_cities()
        name_entry.delete(0, tk.END)
    else:
        messagebox.showerror("Error", "No city selected")

def load_cities():
    cities = get_all_cities()
    cities_listbox.delete(0, tk.END)
    for city in cities:
        cities_listbox.insert(tk.END, f"{city[0]}: {city[1]}: {city[2]}")

root = tk.Tk()
root.title("City Management")
root.geometry("400x400")


cities_listbox = tk.Listbox(root)
cities_listbox.pack()

name_entry = tk.Entry(root)
name_entry.pack()

state_var = tk.StringVar()

states = get_all_states()

state_options = [state[1] for state in states]

state_var.set(state_options[0])

state_menu = tk.OptionMenu(root, state_var, *state_options)
state_menu.pack()

create_button = tk.Button(root, text="Create", command=create_city)
create_button.pack()

update_button = tk.Button(root, text="Update", command=update_selected_city)
update_button.pack()

delete_button = tk.Button(root, text="Delete", command=delete_selected_city)
delete_button.pack()

load_cities()

root.mainloop()

# Close the database connection
conn.close()