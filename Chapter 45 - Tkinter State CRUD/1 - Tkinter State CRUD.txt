import tkinter as tk
from tkinter import messagebox
import sqlite3

# create a database connection
conn = sqlite3.connect('ifsc_code_finder.db')
cursor = conn.cursor()

# create state table
cursor.execute('''
    CREATE TABLE IF NOT EXISTS state (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name VARCHAR(255),
        country_id INTEGER,
        FOREIGN KEY (country_id) REFERENCES country(id)
        )
''')
conn.commit()

def insert_state(name, country_id):
    cursor.execute("INSERT INTO state (name, country_id) VALUES (?,?)", (name, country_id))
    conn.commit()

def update_state(id, name, country_id):
    cursor.execute("UPDATE state SET name = ? country_id = ? WHERE id = ?", (name, country_id, id))
    conn.commit()

def delete_state(id):
    cursor.execute("DELETE FROM state WHERE id = ?", (id,))
    conn.commit()

def get_all_states():
    cursor.execute("SELECT * FROM state")
    rows = cursor.fetchall()
    return rows

def get_all_countries():
    cursor.execute("SELECT * FROM country")
    rows = cursor.fetchall()
    return rows

def get_state_by_id(id):
    cursor.execute("SELECT * FROM state WHERE id = ?", (id,))
    row = cursor.fetchone()
    return row

def create_state():
    name = name_entry.get().strip()
    country_id = country_var.get()
    if name:
        insert_state(name, country_id)
        messagebox.showinfo("Success", "State created successfully")
        load_states()
        name_entry.delete(0, tk.END)
    else:
        messagebox.showerror("Error", "Please enter a State name")
    
def update_selected_state():
    selected_item = states_listbox.curselection()
    if selected_item:
        selected_state = states_listbox.get(selected_item)
        new_name = name_entry.get().strip()
        country_id = country_var.get()
        if new_name:
            state_id = selected_state.split(":")[0]
            update_state(state_id, new_name, country_id)
            messagebox.showinfo("Success", "State updated successfully")
            load_states()
            name_entry.delete(0, tk.END)
        else:
            messagebox.showerror("Error", "Please enter a state name")
    else:
        messagebox.showerror("Error", "No state selected")

def delete_selected_state():
    selected_item = states_listbox.curselection()
    if selected_item:
        selected_state = states_listbox.get(selected_item)
        state_id = selected_state.split(":")[0]
        delete_state(state_id)
        messagebox.showinfo("Success", "State deleted successfully")
        load_states()
        name_entry.delete(0, tk.END)
    else:
        messagebox.showerror("Error", "No state selected")

def load_states():
    states = get_all_states()
    states_listbox.delete(0, tk.END)
    for state in states:
        states_listbox.insert(tk.END, f"{state[0]}: {state[1]}: {state[2]}")

# create the main window
root = tk.Tk()
root.title("State Management")
root.geometry("400x400")

# State listbox
states_listbox = tk.Listbox(root)
states_listbox.pack()

# state name entry
name_entry = tk.Entry(root)
name_entry.pack()

# dropdown menus for countries
country_var = tk.StringVar()
countries = get_all_countries()

# assuming country name is in the second column
country_options = [country[1] for country in countries]

# set default option
country_var.set(country_options[0])
country_menu = tk.OptionMenu(root, country_var, country_options)
country_menu.pack()

# buttons
create_button = tk.Button(root, text="Create", command=create_state)
create_button.pack()

update_button = tk.Button(root, text="Update", command=update_selected_state)
update_button.pack()

delete_button = tk.Button(root, text="Delete", command=delete_selected_state)
delete_button.pack()

# load states on startup
load_states()

# start the mainloop
root.mainloop()

# close the database connection
conn.close()
